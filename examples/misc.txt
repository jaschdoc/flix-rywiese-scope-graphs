use List.nth
use List.Hat.q
use List as LList
use Q.A.f as g

type alias Static = <Internal.IO>

enum Point {
    case P2D(Int32, Int32)
    case P3D(Int32, Int32, Int32)
}

enum List[t] {
    case Nil
    case Cons(t, List)
}

mod List {
    use Eq.eq
    use ToString.toString
    use Category.Functor

    type alias F = <Q.A.T, String>

}

mod Q {
    mod A {

        type alias T = <String>
    }
}
